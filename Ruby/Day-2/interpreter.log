mr-flibble:Day-2 mike$ irb
>> def tell_the_truth
>>   true
>> end
=> nil
>> tell_the_truth
=> true
>> animals = ['lions', 'tigers', 'bears']
=> ["lions", "tigers", "bears"]
>> puts animals
lions
tigers
bears
=> nil
>> animals[0]
=> "lions"
>> animals[2]
=> "bears"
>> animals[10]
=> nil
>> animals[-1]
=> "bears"
>> animals[-2]
=> "tigers"
>> animals[-4]
=> nil
>> animals[0..1]
=> ["lions", "tigers"]
>> (0..1).class
=> Range
>> a[0] = 0
NameError: undefined local variable or method `a' for main:Object
	from (irb):15
>> a = []
=> []
>> [1].class
=> Array
>> [1].methods
=> ["zip", "pop", "find_index", "rassoc", "each_slice", "map!", "minmax", "methods", "send", "shuffle!", "replace", "values_at", "empty?", "group_by", "shuffle", "taint", "instance_variable_defined?", "shift", "take", "find_all", "uniq", "min_by", "enum_slice", "entries", "singleton_methods", "instance_eval", "delete_at", "first", "choice", "nil?", "unshift", "take_while", "select", "max_by", "each_cons", "protected_methods", "instance_exec", "display", "sort", "tainted?", "delete_if", "include?", "join", "untaint", "instance_of?", "permutation", "each_index", "uniq!", "drop", "equal?", "reject", "compact", "minmax_by", "enum_cons", "hash", "to_ary", "all?", "private_methods", "sort_by", "method", "kind_of?", "combination", "freeze", "drop_while", "eql?", "indexes", "collect", "id", "slice", "at", "reject!", "grep", "any?", "public_methods", "transpose", "&", "is_a?", "product", "compact!", "cycle", "indices", "map", "member?", "tap", "type", "*", "flatten", "insert", "fetch", "each_with_index", "+", "count", "one?", "instance_variables", "tell_the_truth", "__id__", "frozen?", "clear", "-", "object_id", "to_a", "respond_to?", "each", "inject", "slice!", "class", "reverse", "length", "last", "enum_with_index", "<=>", "none?", "instance_variable_get", "find", "==", "fill", "__send__", "sort!", "===", "min", "to_enum", "extend", "to_s", "index", "flatten!", "size", "reduce", "|", "nitems", "clone", "reverse_each", "push", "=~", "instance_variable_set", "detect", "assoc", "pack", "collect!", "max", "enum_for", "inspect", "[]", "reverse!", "rindex", "partition", "delete", "[]=", "concat", "dup", "<<"]
>> [1].methods.include?('[]')
=> true
>> [1].methods.include?(:[])
=> false
>> a
=> []
>> puts a
=> nil
>> a
=> []
>> a = []
=> []
>> a[0] = 'zero'
=> "zero"
>> a[1] = 1
=> 1
>> a[2] = ['two', 'things']
=> ["two", "things"]
>> a
=> ["zero", 1, ["two", "things"]]
>> puts a
zero
1
two
things
=> nil
>> a = [[1,2,3], [10,20,30], [40,50,60]]
=> [[1, 2, 3], [10, 20, 30], [40, 50, 60]]
>> a[0][0]
=> 1
>> a[1][2]
=> 30
>> a = [1]
=> [1]
>> a
=> [1]
>> a.push(1)
=> [1, 1]
>> a = [1]
=> [1]
>> a.push(2)
=> [1, 2]
>> a.pop
=> 2
>> a.pop
=> 1
>> numbers = {1 => 'one', 2 => 'two'}
=> {1=>"one", 2=>"two"}
>> numbers[1]
=> "one"
>> numbers[2]
=> "two"
>> stuff = {:array => [1,2,3], :string => 'Hi!'}
=> {:array=>[1, 2, 3], :string=>"Hi!"}
>> stuff
=> {:array=>[1, 2, 3], :string=>"Hi!"}
>> stuff[:string]
=> "Hi!"
>> 'string'.object_id
=> 2231066160
>> 'string'.object_id
=> 2231012940
>> :string.object_id
=> 145788
>> :string.object_id
=> 145788
>> def tell_the_truth(options={})
>>   if options[:profession] == :lawyer
>>     'it could be believed that this is almost certainly not false.'
>>   else
?>     true
>>   end
>> end
=> nil
>> tell_the_truth
=> true
>> tell_the_truth :profession => :lawyer
=> "it could be believed that this is almost certainly not false."
>> tell_the_truth(:profession => :lawyer)
=> "it could be believed that this is almost certainly not false."
>> 3.times {puts 'hello'}
hello
hello
hello
=> 3
>> animals = ['lions and', 'tigers and', 'bears', 'oh my']
=> ["lions and", "tigers and", "bears", "oh my"]
>> animals.each {|a| puts a}
lions and
tigers and
bears
oh my
=> ["lions and", "tigers and", "bears", "oh my"]
>> class Fixnum
>>   def my_times
>>     i = self
>>     while i > 0
>>       i = i - 1
>>       yield
>>     end
>>   end
>> end
=> nil
>> 3.my_times {puts 'silly rabbit'}
silly rabbit
silly rabbit
silly rabbit
=> nil
>> def call_block(&block)
>>   block.call
>> end
=> nil
>> def pass_block(&block)
>>   call_block(&block)
>> end
=> nil
>> pass_block {puts 'Hello, block'}
Hello, block
=> nil
>> 
[1]+  Stopped                 irb
mr-flibble:Day-2 mike$ ruby hello.rb
hello, world
mr-flibble:Day-2 mike$ fg
irb
>> 4.class
=> Fixnum
>> 4.class.superclass
=> Integer
>> 4.class.superclass.superclass
=> Numeric
>> 4.class.superclass.superclass.superclass
=> Object
>> 4.class.superclass.superclass.superclass.superclass
=> nil
>> 4.class.class
=> Class
>> 4.class
=> Fixnum
>> 4.class.class.superclass
=> Module
>> 4.class.class.superclass.superclass
=> Object
>> 4.class.class.superclass.class
=> Class
>> 4.class.class.superclass.superclass.class
=> Class
>> 
[1]+  Stopped                 irb
mr-flibble:Day-2 mike$ cp ~/Downloads/tree.rb 
usage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file target_file
       cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory
mr-flibble:Day-2 mike$ cp ~/Downloads/tree.rb  .
mr-flibble:Day-2 mike$ ls
hello.rb	tree.rb
mr-flibble:Day-2 mike$ fg
irb
>> 
[1]+  Stopped                 irb
mr-flibble:Day-2 mike$ ruby tree.rb 
Visiting a node
Ruby

visiting entire tree
Ruby
Reia
MacRuby
mr-flibble:Day-2 mike$ fg
irb
>> 
[1]+  Stopped                 irb
mr-flibble:Day-2 mike$ wget http://media.pragprog.com/titles/btlang/code/ruby/to_file.rb
--2012-07-23 18:52:27--  http://media.pragprog.com/titles/btlang/code/ruby/to_file.rb
Resolving media.pragprog.com (media.pragprog.com)... 54.240.164.43, 54.240.164.41, 54.240.164.154, ...
Connecting to media.pragprog.com (media.pragprog.com)|54.240.164.43|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 701 [text/plain]
Saving to: `to_file.rb'

100%[======================================>] 701         --.-K/s   in 0s      

2012-07-23 18:52:29 (44.6 MB/s) - `to_file.rb' saved [701/701]

mr-flibble:Day-2 mike$ fg
irb
>> 'begin' <=> 'end'
=> -1
>> 'same' <=> 'same'
=> 0
>> a = [5,3,4,1]
=> [5, 3, 4, 1]
>> a.sort
=> [1, 3, 4, 5]
>> a.any? {|i| i > 6}
=> false
>> a.any? {|i| i > 4}
=> true
>> a.all? {|i| i > 4}
=> false
>> a.all? {|i| i > 0}
=> true
>> a.collect {|i| i * 2}
=> [10, 6, 8, 2]
>> a.select {|i| i % 2 == 0}
=> [4]
>> a.select {|i| i not nil}
SyntaxError: compile error
(irb):101: syntax error, unexpected kNOT, expecting '}'
a.select {|i| i not nil}
                   ^
	from (irb):101
	from :0
>> a
=> [5, 3, 4, 1]
>> a.inject {|sum, i| sum + i}
=> 13
>> a.inject {|product, i| product * i}
=> 60
>> a.inject(0) do |sum, i|
?>   puts "sum: #{sum}  i: #{i}   sum + i: #{sum + i}
"
>>   sum + i
>> end
sum: 0  i: 5   sum + i: 5
sum: 5  i: 3   sum + i: 8
sum: 8  i: 4   sum + i: 12
sum: 12  i: 1   sum + i: 13
=> 13
>> [].class
=> Array
>> [].class.method
ArgumentError: wrong number of arguments (0 for 1)
	from (irb):111:in `method'
	from (irb):111
	from :0
>> [].class.methods
=> ["private_class_method", "inspect", "name", "tap", "clone", "public_methods", "__send__", "method_defined?", "instance_variable_defined?", "autoload", "equal?", "freeze", "extend", "send", "const_defined?", "methods", "ancestors", "module_eval", "hash", "dup", "object_id", "instance_methods", "public_method_defined?", "instance_variables", "class_variable_defined?", "eql?", "constants", "id", "instance_eval", "singleton_methods", "call_block", "module_exec", "instance_method", "const_missing", "taint", "autoload?", "instance_variable_get", "frozen?", "to_enum", "private_method_defined?", "public_instance_methods", "display", "instance_of?", "superclass", "to_a", "included_modules", "const_get", "instance_exec", "type", "<", "protected_methods", "<=>", "pass_block", "class_eval", "==", "class_variables", ">", "===", "instance_variable_set", "enum_for", "protected_instance_methods", "protected_method_defined?", "respond_to?", "kind_of?", ">=", "method", "public_class_method", "to_s", "<=", "const_set", "allocate", "class", "new", "private_methods", "=~", "tainted?", "__id__", "class_exec", "untaint", "nil?", "tell_the_truth", "private_instance_methods", "include?", "is_a?", "[]"]
>> {}.class
=> Hash
>> {}.class.methods
=> ["private_class_method", "inspect", "name", "tap", "clone", "public_methods", "__send__", "method_defined?", "instance_variable_defined?", "autoload", "equal?", "freeze", "extend", "send", "const_defined?", "methods", "ancestors", "module_eval", "hash", "dup", "object_id", "instance_methods", "public_method_defined?", "instance_variables", "class_variable_defined?", "eql?", "constants", "id", "instance_eval", "singleton_methods", "call_block", "module_exec", "instance_method", "const_missing", "taint", "autoload?", "instance_variable_get", "frozen?", "to_enum", "private_method_defined?", "public_instance_methods", "display", "instance_of?", "superclass", "to_a", "included_modules", "const_get", "instance_exec", "type", "<", "protected_methods", "<=>", "pass_block", "class_eval", "==", "class_variables", ">", "===", "instance_variable_set", "enum_for", "protected_instance_methods", "protected_method_defined?", "respond_to?", "kind_of?", ">=", "method", "public_class_method", "to_s", "<=", "const_set", "allocate", "class", "new", "private_methods", "=~", "tainted?", "__id__", "class_exec", "untaint", "nil?", "tell_the_truth", "private_instance_methods", "include?", "is_a?", "[]"]
>> 
[1]+  Stopped                 irb
mr-flibble:Day-2 mike$ ruby array.rb 
there are 8 items in the array: 0167121323891415451011
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
array.rb:3: undefined method `size=' for [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]:Array (NoMethodError)
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
array.rb:3: undefined method `assert' for main:Object (NoMethodError)
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
array.rb:3:in `each': wrong number of arguments (1 for 0) (ArgumentError)
	from array.rb:3
mr-flibble:Day-2 mike$ ruby array.rb 
there are 16 items in the array: 0123456789101112131415
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
mr-flibble:Day-2 mike$ ruby tree2.rb 
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
tree2.rb:38: syntax error, unexpected tINTEGER, expecting kDO or '{' or '('
... => { ’dad’ => {’child 1’ => {}, ’child 2’ => {}...
                              ^
tree2.rb:38: Invalid char `\342' in expression
tree2.rb:38: Invalid char `\200' in expression
tree2.rb:38: Invalid char `\231' in expression
mr-flibble:Day-2 mike$ fg
irb
>> {’grandpa’ => { ’dad’ => {’child 1’ => {}, ’child 2’ => {} }, ’uncle’ => {’child 3’ => {}, ’child 4’ => {} } } }
SyntaxError: compile error
(irb):115: syntax error, unexpected $end, expecting '}'
	from (irb):115
	from :0
mr-flibble:Day-2 mike$ 